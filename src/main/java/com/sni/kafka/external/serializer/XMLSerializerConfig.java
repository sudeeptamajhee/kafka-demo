package com.sni.kafka.external.serializer;

import java.util.Map;

import javax.xml.bind.Marshaller;

import org.apache.kafka.common.config.AbstractConfig;
import org.apache.kafka.common.config.ConfigDef;

public class XMLSerializerConfig extends AbstractConfig {

	public final boolean formattedOutput;
	public final String encoding;

	public static final String JAXB_FORMATTED_OUTPUT_CONF = Marshaller.JAXB_FORMATTED_OUTPUT;
	static final String JAXB_FORMATTED_OUTPUT_DOC = "This property controls whether or not the Marshaller will format "
			+ "the resulting XML data with line breaks and indentation. A true value for this property indicates human "
			+ "readable indented xml data, while a false value indicates unformatted xml data. The Marshaller will "
			+ "default to false (unformatted) if this property is not specified.";
	
	public static final String JAXB_ENCODING_CONF = Marshaller.JAXB_ENCODING;
	static final String JAXB_ENCODING_DOC = "The output encoding in the marshalled XML data.";
	
	public static final String JAXB_FRAGMENT_CONF = Marshaller.JAXB_FRAGMENT;
	static final String JAXB_FRAGMENT_DOC = "This property determines whether or not document level events will be "
			+ "generated by the Marshaller. If the property is not specified, the default is false. This property has "
			+ "different implications depending on which marshal api you are using - when this property is set to true:";

	public XMLSerializerConfig(Map<String, ?> originals) {
		super(config(), originals);
		this.formattedOutput = getBoolean(Marshaller.JAXB_FORMATTED_OUTPUT);
		this.encoding = getString(Marshaller.JAXB_ENCODING);
	}

	public static ConfigDef config() {

		return new ConfigDef()
				.define(JAXB_FORMATTED_OUTPUT_CONF, ConfigDef.Type.BOOLEAN, false, ConfigDef.Importance.LOW,
						JAXB_FORMATTED_OUTPUT_DOC)
				.define(JAXB_ENCODING_CONF, ConfigDef.Type.STRING, "UTF-8", ConfigDef.Importance.LOW, JAXB_ENCODING_DOC)
				.define(JAXB_FRAGMENT_CONF, ConfigDef.Type.BOOLEAN, true, ConfigDef.Importance.LOW, JAXB_FRAGMENT_DOC);
	}
}
